[{"path":"https://christophemetsu.github.io/theRmalUAV/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christophe Metsu. Maintainer.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Metsu C (2025). theRmalUAV: Clean correct thermal UAV data. R package version 0.1.0, https://christophemetsu.github.io/theRmalUAV/.","code":"@Manual{,   title = {theRmalUAV: Clean and correct thermal UAV data},   author = {Christophe Metsu},   year = {2025},   note = {R package version 0.1.0},   url = {https://christophemetsu.github.io/theRmalUAV/}, }"},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/index.html","id":"id_1-overview","dir":"","previous_headings":"","what":"1. Overview","title":"Clean and correct thermal UAV data","text":"goal theRmalUAV clean correct raw thermal UAV data. two workflows can followed: Image-based Workflow: perform corrections image level Orthomosaic-based Workflow: perform corrections orthomosaic containing uncorrected brightness temperatures","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/index.html","id":"thermaluav-1","dir":"","previous_headings":"2. Installation","what":"theRmalUAV","title":"Clean and correct thermal UAV data","text":"theRmalUAV CRAN (yet). can install development version theRmalUAV GitHub: Note: Windows users need RTools build packages source files (basically install GitHub). RTools R package, rather set utilities install separately. can download install RTools https://cran.r-project.org/bin/windows/Rtools/. Alternately, can install RTools within R running: RTools installed, can install theRmalUAV GitHub","code":"install.packages('installr') installr::install.Rtools() ## install.packages('remotes') remotes::install_github(\"christophemetsu/theRmalUAV\")"},{"path":"https://christophemetsu.github.io/theRmalUAV/index.html","id":"dependent-packages","dir":"","previous_headings":"2. Installation","what":"Dependent Packages","title":"Clean and correct thermal UAV data","text":"theRmalUAV requires several dependent packages, including fs, progress, rmarkdown, svDialogs, terra, tiff, others (see DESCRIPTION file complete list). Normally missing packages installed time, get error message missing package(s), install dependent packages separately (.e., ‘Packages’ pane RStudio) run remotes::install_github(“christophemetsu/theRmalUAV”, dependencies=FALSE).","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/index.html","id":"exiftool","dir":"","previous_headings":"2. Installation > Dependent Packages","what":"exiftool","title":"Clean and correct thermal UAV data","text":"read EXIF data image files, theRmalUAV requires external command line tool called ‘exiftool’. UPDATE: version 1.6.0, longer need manually install exiftool command line utility. Rather can install running: verify worked: Alternately, can install exiftool manually downloading http://www.sno.phy.queensu.ca/~phil/exiftool/. sure unzip folder path (e.g, c:) rename executable file exiftool(-k).exe exiftool.exe.","code":"exiftoolr::install_exiftool() exiftoolr::exif_version() #> Using ExifTool version 12.50 #> [1] \"12.50\""},{"path":"https://christophemetsu.github.io/theRmalUAV/index.html","id":"id_3-supported-thermal-sensors","dir":"","previous_headings":"","what":"3. Supported thermal sensors","title":"Clean and correct thermal UAV data","text":"obtain table available thermal sensor can use, run tuav_cameras() argument. sensor listed, may submit issue GitHub added. details see help page (?tuav_cameras) contact package author.","code":"tuav_cameras()"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/theRmalUAV-package.html","id":null,"dir":"Reference","previous_headings":"","what":"theRmalUAV: Clean and correct thermal UAV data — theRmalUAV-package","title":"theRmalUAV: Clean and correct thermal UAV data — theRmalUAV-package","text":"package designed correct thermal UAV data. comprises data cleaning, image reduction, caluclating overlap, atmospheric corrections, accounting temperature fluctuations flight, emissivity corrections ect. corrected data stored tiff-file updated exifdata, ready implement commercial photogrammetry softwares. furthermore provides opportunity optimize thermal camera positions using coregistrated high resolution cameras.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/crs.html","id":null,"dir":"Reference","previous_headings":"","what":"CRS function — crs","title":"CRS function — crs","text":"order plot data terra::plet function, crs(x) function ran locally, due bad call CRS leaflet package See terra::crs information function.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CRS function — crs","text":"","code":"crs(x, proj = FALSE, describe = FALSE, parse = FALSE)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_sharp.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates image sharpness — tuav_sharp","title":"Estimates image sharpness — tuav_sharp","text":"tuav_sharp() estimates sharpness thermal images.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_sharp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates image sharpness — tuav_sharp","text":"","code":"tuav_sharp(thermal_uav)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_sharp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates image sharpness — tuav_sharp","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()). ThermalData empty, raw TIFFs loaded directly folder containing tiff files.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_sharp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates image sharpness — tuav_sharp","text":"function returns updated ThermalUAV object containing vector sharpness image.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_sharp_thresh.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sharpness threshold — tuav_sharp_thresh","title":"Get sharpness threshold — tuav_sharp_thresh","text":"tuav_sharp_thresh() estimates sharpness iteratively asking whether image sharp enough, sharp enough. goal set sharpness threshold used image reduction function.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_sharp_thresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sharpness threshold — tuav_sharp_thresh","text":"","code":"tuav_sharp_thresh(thermal_uav)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_sharp_thresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sharpness threshold — tuav_sharp_thresh","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()). ThermalData empty, raw TIFFs loaded directly folder containing tiff files.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_sharp_thresh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sharpness threshold — tuav_sharp_thresh","text":"function returns sharpness value can set threshold tuav_reduc() function","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_persec.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep the best image(s) per second — tuav_persec","title":"Keep the best image(s) per second — tuav_persec","text":"tuav_persec() ranks images within 1 second based sharpness keeps x sharpest images. function primarily streaming/filming thermal cameras like ThermalCapture. goal reduce number images processing.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_persec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep the best image(s) per second — tuav_persec","text":"","code":"tuav_persec(thermal_uav, number_keep = 1, remove = FALSE)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_persec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep the best image(s) per second — tuav_persec","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()) number_keep (numerical) number images want keep per second (default = 1) remove (logical) use TRUE delete images local disk space, default FALSE images simple replaced subfolder called \"Removed img_persec\"","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_persec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep the best image(s) per second — tuav_persec","text":"updated ThermalUAV object (re)moves least sharp images","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_reduc.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean the dataset based on overlap or sharpness — tuav_reduc","title":"Clean the dataset based on overlap or sharpness — tuav_reduc","text":"tuav_reduc() reduces thermal dataset, either based sharpness minimal desired overlap. NOTE: extents yet calculated, function automatically calculate .","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_reduc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean the dataset based on overlap or sharpness — tuav_reduc","text":"","code":"tuav_reduc(   thermal_uav,   method = \"Overlap\",   min_overlap = 0.8,   sharpness_threshold = 0.05,   remove = FALSE )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_reduc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean the dataset based on overlap or sharpness — tuav_reduc","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()). ThermalData empty, raw TIFFs loaded directly folder containing tiff files. method method want choose image reduction. can \"Overlap\" reduce dataset based minimal overlap (final targetted overlap around `min_overlap`) \"Sharpness\" remove unsharp images (based `sharpness_threshold`). min_overlap (numerical) targetted overlap (0-1) \"Overlap\" method criteria acertain minimal overlap case large part consecutive unsharp images. Default 0.80 sharpness_threshold (numerical) threshold decide image sharp unsharp. Default 0.05 remove (logical) use TRUE delete images local disk space. Default FALSE images simple replaced subfolder called \"Removed img_reduc\"","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_reduc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean the dataset based on overlap or sharpness — tuav_reduc","text":"function returns updated (reduced) ThermalUAV object (re)moves least sharp images","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes image-level corrections — tuav_correct","title":"Computes image-level corrections — tuav_correct","text":"tuav_correct() executes atmospheric corrections. Based amount input different corrections done.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes image-level corrections — tuav_correct","text":"","code":"tuav_correct(   thermal_uav,   flight_height = NA,   T_air = NA,   rel_hum = NA,   T_bg = NA,   SKC = TRUE,   emiss = 0.985 )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes image-level corrections — tuav_correct","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()) flight_height (numerical) height camera OBJECT INTEREST. Can single value vector length number images. specified search GPS altitude exif/meta data, use flight_height calculated tuav_loc() function T_air (numerical) air temperature °C flight. Can single value, vector length number images data.frame containing temperature data (\"T_air\") datetime (\"datetime\") UTC (\"%d.%m.%Y %H:%M:%OS\" format). provided mean temperature images taken rel_hum (numerical) relative humidity % flight. Can single value, vector length number images data.frame containing relative humidity data (\"rel_hum\") datetime (\"datetime\") UTC (\"%d.%m.%Y %H:%M:%OS\" format). provided value 50% assumed across entire flight. T_bg (numerical) background temperature Kelvin, temperature measured aluminium panel. recorded set NA parameter estimated using (\"T_air\"), case, need specify whether sky clear (\"SKC\" = TRUE) overcast (\"SKC\" = FALSE). SKC (logical) conditions sky clear, set TRUE, overcast set FALSE (default = TRUE), needed T_bg specified. emiss (numerical) emissivity, default average plants given (0.985)","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes image-level corrections — tuav_correct","text":"function returns updated ThermalUAV object containing ThermalData atmospherically corrected","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_emis.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial emissivity correction — tuav_emis","title":"Spatial emissivity correction — tuav_emis","text":"tuav_emis() corrects stitched thermal orthomosaic emissivity, based high resolution landcover emissivity map.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_emis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial emissivity correction — tuav_emis","text":"","code":"tuav_emis(   thermal_orig,   thermal_uav,   temp = \"K\",   corrmap,   method = \"LC\",   write_Ts = FALSE,   filename_Ts = NA,   write_emiss = FALSE,   filename_emiss = NA,   NDVI_veg = 0.8,   NDVI_soil = 0.2,   emiss_veg = 0.988,   emiss_soil = 0.935,   LC_emiss_matrix = NA )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_emis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial emissivity correction — tuav_emis","text":"thermal_orig Map (SpatRaster) path geotiff file (chr) original land surface temperature map thermal_uav ThermalUAV object corresponding thermal map. needed extract parameters used tuav_correct() temp indicate scale thermal map represents temperatures. Use \"K\" Kelvin \"C\" degree Celcius. corrmap Map (SpatRaster) path geotiff file (chr) emissivity correction. can either landcover map, NDVI map emissivity map. method Indicate variable correction map provides. Use \"LC\" landcover provided, \"NDVI\" want use NDVI method \"EM\" emissivity provided. write_Ts (logical) use TRUE corrected thermal map must written. Default = FALSE filename_Ts path filename corrected thermal map stored. NA, written thermal path label \"_emis_corr\". variable used write_Ts = TRUE write_emiss (logical) use TRUE emissivity map must written. Default = FALSE filename_emiss path filename emissivity map stored. NA, written thermal path label \"_emis\". variable used write_emiss = TRUE NDVI_veg NDVI value vegetation. NDVI values threshold receive emissivity defined emiss_veg NDVI_soil NDVI value bare soil. NDVI values threshold receive emissivity defined emiss_soil emiss_veg emissivity vegetation, taken NDVI higher NDVI_veg emiss_soil emissivity bare soil, taken NDVI lower NDVI_soil LC_emiss_matrix two column matrix first column LC values second corresponding emissivties, used method = \"LC\"","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_emis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial emissivity correction — tuav_emis","text":"returns recalculated thermal map corrected spatially varying different emissivities.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooths thermal data — tuav_smooth","title":"Smooths thermal data — tuav_smooth","text":"tuav_smooth() smooths thermal dataset avoid large fluctuations. Two methods possible: () based provided high temporal resolution air temperature dataset (ii) empirical smoothing using temperatures images.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooths thermal data — tuav_smooth","text":"","code":"tuav_smooth(thermal_uav, method = \"image\", T_air = NA, smooth_length = NA)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooths thermal data — tuav_smooth","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()). Note order smooth thermal data, tuav_correct ran first method One two methods: () \"T_air\" dataset smoothed based high resolution air temperature dataset (ii) \"image\" smoothing done based average image temperature, default \"image\" T_air method \"T_air\": air temperature °C flight. Can vector length number images data.frame containing temperature data (\"T_air\") datetime (\"datetime\") UTC (\"%d.%m.%Y %H:%M:%OS\" format). already provided tuav_correct(), can leave black . Default NA smooth_length (numerical) amount images taken account smooth temperature. Default NA smooth length number overlapping images. smooth length ignored method \"T_air\".","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooths thermal data — tuav_smooth","text":"function returns updated ThermalUAV object smoothed ThermalData","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/ortho_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Atmospheric and emissivity correction for othomosaics — ortho_correct","title":"Atmospheric and emissivity correction for othomosaics — ortho_correct","text":"ortho_correct() executes atmospheric emissivity corrections already stitched maps. function can used single values atmospheric parameters collected data integrated cameras difficulties stitching thermal data separately. Within flight variations captured function.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/ortho_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atmospheric and emissivity correction for othomosaics — ortho_correct","text":"","code":"ortho_correct(   thermal_ortho = thermal_ortho,   temp = \"C\",   flight_height = NA,   T_air = NA,   rel_hum = NA,   T_bg = NA,   SKC = TRUE,   emiss = 0.985,   method = NA,   corrmap = NA,   return_emis = FALSE,   NDVI_veg = 0.8,   NDVI_soil = 0.2,   emiss_veg = 0.988,   emiss_soil = 0.935,   LC_emiss_matrix = NA )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/ortho_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atmospheric and emissivity correction for othomosaics — ortho_correct","text":"thermal_ortho Map (SpatRaster) path geotiff file (chr) containing brightness temperatures temp Indicate scale \"thermal_ortho\" map represents temperatures. Use \"K\" Kelvin \"C\" degree Celcius. flight_height (numerical) height camera OBJECT INTEREST expressed meters. T_air (numerical) air temperature °C flight. NA use trimmed mean temperatures thermal_ortho map. rel_hum (numerical) relative humidity % flight. provided value 50% assumed. T_bg (numerical) background temperature Kelvin, temperature measured aluminium panel. recorded set NA parameter estimated using (\"T_air\"), case, need specify whether sky clear (\"SKC\" = TRUE) overcast (\"SKC\" = FALSE). SKC (logical) conditions sky clear, set TRUE, overcast set FALSE (default = TRUE), needed T_bg specified. emiss (numerical) emissivity, default average plants given (0.985) method Indicate variable correction map provides. Use \"LC\" landcover provided, \"NDVI\" want use NDVI method \"EM\" emissivity provided. Set NA spatial information emissivity can calculated. corrmap Map (SpatRaster) path geotiff file (chr) emissivity correction. can either landcover map, NDVI map emissivity map. return_emis (logical) set TRUE, calcualted emissivty map returned together surface temperature raster stack NDVI_veg NDVI value vegetation. NDVI values threshold receive emissivity defined emiss_veg NDVI_soil NDVI value bare soil. NDVI values threshold receive emissivity defined emiss_soil emiss_veg emissivity vegetation, taken NDVI higher NDVI_veg emiss_soil emissivity bare soil, taken NDVI lower NDVI_soil LC_emiss_matrix two column matrix first column LC values second corresponding emissivties, used method = \"LC\"","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/ortho_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atmospheric and emissivity correction for othomosaics — ortho_correct","text":"returns thermal map atmospherically corrected temperatures, accounted (spatially varying) emissivity.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_dji.html","id":null,"dir":"Reference","previous_headings":"","what":"Thermal SDK from DJI: corrections using DJI's algorithm — tuav_dji","title":"Thermal SDK from DJI: corrections using DJI's algorithm — tuav_dji","text":"tuav_dji() Processes data using DJI thermal processing tool. limitations: one parameter images, limited ranges...","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_dji.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thermal SDK from DJI: corrections using DJI's algorithm — tuav_dji","text":"","code":"tuav_dji(   thermal_uav,   obj_dist = NA,   rel_hum = NA,   emissivity = NA,   refl_temp = NA,   return = TRUE,   export = FALSE,   export_path = NA )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_dji.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thermal SDK from DJI: corrections using DJI's algorithm — tuav_dji","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()) obj_dist (numerical) Indicates distance (meter) camera object interest [1-25]. Default = 5m rel_hum (numerical) relative humidity (percentage), typically range [20 - 100]. Default = 70 emissivity (numerical) strongly target surface emitting energy thermal radiation. Value range [0.10 - 1.00]. Default = 0.98 refl_temp (numerical) Reflected temperature degree Celsius. surface target measured reflect energy radiated surrounding objects. Value range [-40.0 - 500.0]. Default = 23 return (logical) indicate want matrix/list matrices returned R environment. Default = TRUE export (logical) Indicate TRUE want write output tiff file. Default = FALSE export_path (character) Path export file, used export = TRUE, NA, function create nuw map called 'dirp_Ts' folder images stored","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_dji.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thermal SDK from DJI: corrections using DJI's algorithm — tuav_dji","text":"matrix list matrices containing corrected temperature parameter return = TRUE","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the necessary info and create a ThermalUAV object — tuav_create","title":"Get all the necessary info and create a ThermalUAV object — tuav_create","text":"tuav_create() gets information needed analysis creates ThermalUAV object","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the necessary info and create a ThermalUAV object — tuav_create","text":"","code":"tuav_create(path, camera = \"ThermalCapture\", meta_csv = NA, flight_height = NA)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the necessary info and create a ThermalUAV object — tuav_create","text":"path path folder containing TIFF files, path 1 TIFF file camera (character) Indicate camera name, can check tuav_cameras() meta_csv Path additional meta data can provided form csv, provided info derived exif data (may limit function options) flight_height (numerical) height CAMERA GROUND. can single value vector length number images. specified search GPS altitude exif/meta data","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the necessary info and create a ThermalUAV object — tuav_create","text":"ThermalUAV object necessary information, serves input following functions","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_cameras.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of supported cameras — tuav_cameras","title":"A list of supported cameras — tuav_cameras","text":"tuav_cameras() provides overview cameras can used processing","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_cameras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of supported cameras — tuav_cameras","text":"","code":"tuav_cameras()"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_cameras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of supported cameras — tuav_cameras","text":"prints overview available cameras","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a TheRmalUAV report — tuav_report","title":"Make a TheRmalUAV report — tuav_report","text":"tuav_report() writes report information processing done package","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a TheRmalUAV report — tuav_report","text":"","code":"tuav_report(   thermal_uav,   path = NA,   project_name = \"Thermal_uav\",   flight_name = \"\",   pilot_name = \"pilot_name\",   location = \"location\" )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a TheRmalUAV report — tuav_report","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()). path path folder want save report. NA report saved path original tifs project_name (character) name project put report flight_name (character) name flight put report pilot_name (character) name pilot put report location (character) location flight executed","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a TheRmalUAV report — tuav_report","text":"exports ThermalData tif files","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export thermal data as TIFF files — tuav_export","title":"Export thermal data as TIFF files — tuav_export","text":"tuav_export() exports ThermalData. Note order export data, least tuav_correct ran first","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export thermal data as TIFF files — tuav_export","text":"","code":"tuav_export(thermal_uav, export_path = NA)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export thermal data as TIFF files — tuav_export","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_cameras()). export_path path folder images stored. NA, images stored new folder original path called 'corrected'","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export thermal data as TIFF files — tuav_export","text":"exports ThermalData tiff files. Note data stored centikelvin.","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/ThermalUAV-Class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"ThermalUAV groups necessary information together logical order. object Class ThermalUAV serves functions input provides data upon functions build. consists thermal classes, representing different kinds information.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/ThermalUAV-Class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Info (S4 ThermalInfo) Holds general information regaring information image files project path, filenames, camera info, meta data, time etc. Position (S4 ThermalPosition) Holds information position tifs including gps location, flightheight, overlap well shapefiles (tuav_loc() run) Sharpness (S4 ThermalSharpness) Holds information sharpness used cleaning (e.g.: Sharpness threshold, cleaning methods, number images removed. etc.) Atmosphere (S4 ThermalAtmosphere) Holds information atmospheric conditions flight including air temperature, relative humidity, atm. transmission, emissivity Smooth (S4 ThermalSmooth) Holds information thermal smoothing correction : smooth length, method etc. ThermalData (list) list matrices holding thermal tiff files. Depending functions already run, represents raw corrected data.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/ThermalUAV-Class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"# Creates an empty ThermalUAV class thermal_class <- methods::new(\"ThermalUAV\")"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_loc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information on camera locations — tuav_loc","title":"Get information on camera locations — tuav_loc","text":"tuav_loc() gives location images option retrieve extents overlap. Furthermore, gives option export GPS/extent information","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_loc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information on camera locations — tuav_loc","text":"","code":"tuav_loc(thermal_uav, extent = FALSE, overlap = FALSE, export = FALSE)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_loc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information on camera locations — tuav_loc","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()) extent (logical) use TRUE get extents instead GPS locations, default FALSE overlap (logical) use TRUE want calculate average overlap subsequent images (extent = TRUE), default FALSE export (logical) use TRUE want export GPS/extents shapefile image names attributes new folder \"Shapefiles\" within path folder, default FALSE","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_loc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information on camera locations — tuav_loc","text":"updated ThermalUAV object containing additional positional information","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cameras/image extents on an interactive map — tuav_view","title":"Plot cameras/image extents on an interactive map — tuav_view","text":"tuav_view() shows extents camera positions viewer interactive map. NOTE: function tuav_loc() run previously","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cameras/image extents on an interactive map — tuav_view","text":"","code":"tuav_view(thermal_uav, extent = FALSE)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cameras/image extents on an interactive map — tuav_view","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()) extent (logical) use TRUE want plot image extents. NOTE: extents previously calculated tuav_loc() function","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot cameras/image extents on an interactive map — tuav_view","text":"shows GPS locations extents interactive way","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/coreg_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for co-registration — coreg_prep","title":"Prepare data for co-registration — coreg_prep","text":"coreg_prep() prepares data different camera (higher GPS accuracy) use tuav_coreg() function.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/coreg_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for co-registration — coreg_prep","text":"","code":"coreg_prep(   img_path,   SfM_option = NA,   opt_camera_path = NA,   epsg = \"4326\",   camera_name = \"Altum-PT_MSP\",   label = NA,   timezone = NA )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/coreg_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for co-registration — coreg_prep","text":"img_path folder containing high resolution images SfM_option cameras first aligned SfM software, now option \"Agisoft Metashape\". Use NA case want run without previous alignement. Default NA opt_camera_path path .txt .csv file optimized camera positions stored (SfM_option NA), defualt NA epsg epsg coordinates exported/stored, default \"4326\" (WGS 84, latitude/longitude coordinate system based Earth's center mass) camera_name name high resolution camera optimized GPS data used label needed multispectral data, subscript/sequence describing band/camera every position offset calculated (case Micasence Altum-PT green band: \"_2\"). label enter '' timezone timezone datetime data stored. Default NA preset use timezone computer system","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/coreg_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for co-registration — coreg_prep","text":"function returns data.frame containing positional information optimized cameras can used input tuav_coreg() function","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_coreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Co-register locations with another camera — tuav_coreg","title":"Co-register locations with another camera — tuav_coreg","text":"tuav_coreg() corrects GPS-info thermal data accurate GPS information coregistered (high resolution) camera. also cameras coregistered camera already aligned structure form motion software.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_coreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Co-register locations with another camera — tuav_coreg","text":"","code":"tuav_coreg(   thermal_uav,   opt_cameras = NA,   rig_offset = c(0, 0, 0, 0, 0, 0),   timediff = 0 )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_coreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Co-register locations with another camera — tuav_coreg","text":"thermal_uav ThermalUAV object retrieved previous functions (e.g.: tuav_create()). opt_cameras (data.frame) containing optimized camera positions. right format, can prepared coreg_prep() function rig_offset (numerical) vector containing different offsets thermal camera  compared reference optimized camera following offsets mm ° (x, y, z, yaw, pitch, roll). Default vector zeros timediff (numerical) time difference (seconds) optimized camera set thermal data, can specified , default 0","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/tuav_coreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Co-register locations with another camera — tuav_coreg","text":"function returns updated ThermalUAV object containing optimized thermal camera positions","code":""},{"path":[]},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/sim_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulating the correction — sim_correct","title":"Simulating the correction — sim_correct","text":"sim_correct() Converts brightness temperature land surface temperature single value, vector matrix SpatRaster object. basically Equation 3 vignette(\"Background\") form R-function. function intended simulate effects parameters output process positional information/metadata.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/sim_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulating the correction — sim_correct","text":"","code":"sim_correct(   T_bright,   flight_height = 50,   T_air = 25,   rel_hum = 70,   T_bg = NA,   emiss = 0.985 )"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/sim_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulating the correction — sim_correct","text":"T_bright Brightness temperature (Kelvin) want convert. can either single value, vector matrix SpatRaster object flight_height (numerical) height camera OBJECT INTEREST. Default 50 m T_air (numerical) air temperature °C flight. Default 25°C rel_hum (numerical) relative humidity % flight. Default 70 % T_bg (numerical) background temperature Kelvin, temperature measured aluminium panel. recorded set NA parameter accounted . emiss (numerical) emissivity, default average plants given (0.985)","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/sim_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulating the correction — sim_correct","text":"Corrected LST format T_bright parameter","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/dji_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the right environment to work with python in the background — dji_init","title":"Set the right environment to work with python in the background — dji_init","text":"dji_init() initializes virtual environment python using reticulate needed run processing DJI cameras","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/dji_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the right environment to work with python in the background — dji_init","text":"","code":"dji_init(virtenv = NA)"},{"path":"https://christophemetsu.github.io/theRmalUAV/reference/dji_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the right environment to work with python in the background — dji_init","text":"virtenv (character) virtual environment want use, default NA create specified \"r-theRmalUAV\" environment.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"overview","dir":"Articles","previous_headings":"","what":"1. Overview","title":"Image-based Workflow","text":"article go image-based workflow step step. image-based workflow intended perform corrections image level. following figure provides detailed overview image-based workflow, indicating additional functionalities. different steps explained suing two examples: 2. Basic workflow DJI Matrice 3T 3. Advanced workflow TeAx ThermalCapture 2.0","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"basic-workflow-with-dji-matrice-3t","dir":"Articles","previous_headings":"","what":"2. Basic workflow with DJI Matrice 3T","title":"Image-based Workflow","text":"First things first, start need load R package environment: complete can call functions embedded R package using DJI cameras image-based workflow, package utilizes DJI Thermal SDK functionality provided DJI. package uses python background access libraries provided DJI. Therefore, order work DJI cameras first need initial steps. Please read vignette(\"DJI_cameras\") first proceeding.","code":"library(theRmalUAV)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"create-a-thermaluav-object","dir":"Articles","previous_headings":"2. Basic workflow with DJI Matrice 3T","what":"2.1. Create a ThermalUAV object","title":"Image-based Workflow","text":"image-based workflow always starts creating ThermalUAV object using function tuav_create(). give name “thermal_uav” ThermalUAV object. path refers path pc folder containing TIFF/jpg files, path 1 TIFF/jpg file. camera name can found running function tuav_cameras(). flight_height case 75 meters. external metadata dataframe available set NA, way meta data stored exif used.","code":"thermal_uav <- tuav_create(path = \"E:/Thermal_Project/Thermal_data_dji\",                            camera = \"DJI_M3T\",                            meta_csv = NA,                            flight_height = 75)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"conversion-to-lst","dir":"Articles","previous_headings":"2. Basic workflow with DJI Matrice 3T","what":"2.2. Conversion to LST","title":"Image-based Workflow","text":"creating ThermalUAV can already correct data using function tuav_correct(). , atmospheric data required, use expression “?tuav_correct()” check formats can used. example keep simple use one value atmospheric parameter, flight relatively short performed stable weather conditions. values measured using portable Kestrel 5000 weather station. parameter flight_height set NA use height defined tuav_create(). Emissivity set 0.985, commonly used value vegetation. obtain background temperature T_bg Kelvin, brightness temperature crumpled aluminium foil used.","code":"thermal_uav_correct <- tuav_correct(thermal_uav,                                               flight_height = NA,   # in meters                                     T_air = 28.7,         # in °C                                     rel_hum = 47.2,       # in %                                     T_bg = 282.37,        # in Kelvin                                     emiss = 0.985)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"export-and-report","dir":"Articles","previous_headings":"2. Basic workflow with DJI Matrice 3T","what":"2.3. Export and report","title":"Image-based Workflow","text":"Now basic, essential correction done, can export data convert images LST orthomosaic. export data, use function tuav_export(). Make sure use --date ThermalUAV object, holding thermal information latest corrections. Set export_path want store data somewhere specific. use default ‘NA’, create new folder, names “corrected”, within original folder. Optionally, desired, can also create HTM-report using tuav_report():","code":"tuav_export(thermal_uav_correct,             export_path = NA) tuav_report(thermal_uav_correct,             project_name = \"Thermal_Project_DJI\",             flight_name = \"Flight 1\",             pilot_name = \"Pilot X\",             location = \"Flightblock Y\")"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"optional-spatial-emissivity-correction","dir":"Articles","previous_headings":"2. Basic workflow with DJI Matrice 3T","what":"2.4. Optional Spatial Emissivity Correction","title":"Image-based Workflow","text":"stitching exported corrected LST tiff files, obtain LST orthomosaic. LST map assumes one emissvivty value whole area. flew region lot different land covers, parts might /estimated due wrong emissivity value. example, thermal emissivity bare soil, vegetation water differ. can account using NDVI threshold method, landcover (LC) map directly emissivity map available see vignette(“Background”) information. NDVI, LC emissvity map necessarily taken day resolution. However, must completely cover LST orthomosaic. example use NDVI threshold method. multispectral (MSP) data obtained using Micasense Altum-PT day processed Agisoft Metashape using workflow. reflectance calibrated using 50% calibration panel. MSP orthomosaic first loaded create NDVI map. can use terra package work rasters R.  NDVI map created, can account emissivity spatially explicit way using NDVI threshold method. example going set tho following parameters, emissivity values taken paper: - NDVIveg = 0.8 - NDVIsoil = 0.1 - ϵveg = 0.984 (Emissivity shrubs) - ϵsoil = 0.914 (Emissivity sandsoils) correcting spatially explicit emissivity, LST map final can plotted used analysis. Please note, example small part covered water. emissivity water slightly higher shrubs. Careful interpretation water temperatures thus required.","code":"library(terra)  # Load the MSP data as SpatRaster MSP <- rast(\"E:/Thermal_Project/MSP_ortho_dji.tif\") # Create NDVI using the NIR and RED band NDVI <- (MSP$NIR - MSP$RED)/(MSP$NIR + MSP$RED) names(NDVI) <- \"NDVI\"  # Load the LST data as SpatRaster LST <- rast(\"E:/Thermal_Project/LST_ortho_dji.tif\")  # Plot the data par(mfrow = c(2, 1)) plot(NDVI, main = \"NDVI\") plot(LST, main = \"Land surface temperature in °C\", col = map.pal(\"magma\")) LST_emis <- tuav_emis(thermal_orig = LST,                       thermal_uav = thermal_uav_correct, # The last ThermalUAV object,                        temp = \"C\", # LST is in this case in °C                       corrmap = NDVI,                       method = \"NDVI\", # Here we use the NDVI method                       write_Ts = TRUE, # If you want to write the output                       filename_Ts = \"E:/Thermal_Project/LST_ortho_dji_emis.tif\",                       write_emiss = TRUE, # Optionally you can save the emissivity raster file                       filename_emiss = \"E:/Thermal_Project/Emis_ortho_dji.tif\",                       NDVI_veg = 0.8,                       NDVI_soil = 0.1,                       emiss_veg = 0.984,                       emiss_soil = 0.914) plot(LST_emis, main = \"LST corrected for ϵ\", col = map.pal(\"magma\"))"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"advanced-workflow-with-teax-thermalcapture-2-0","dir":"Articles","previous_headings":"","what":"3. Advanced workflow with TeAx ThermalCapture 2.0","title":"Image-based Workflow","text":"example dive advance case using ThermalCapture 2.0. thermal camera records 8.33 Hz, meaning slightly 8 thermal images per second. discuss can reduce data volume efficient way, retaining maximal quality. Furthermore, discuss co-registration works, case Micasense Altum-PT. flight example quite long covering 17 ha, use atmospheric data recorded high frequency. , first things first, create ThermalUAV object.","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"create-a-thermaluav-object-1","dir":"Articles","previous_headings":"3. Advanced workflow with TeAx ThermalCapture 2.0","what":"3.1. Create a ThermalUAV object","title":"Image-based Workflow","text":"section 2.1. Create ThermalUAV object create ThermalUAV object using function tuav_create(). ThermalCapture line TeAx, stores thermal data “.TMC” file. provide software called ThermoViewer convert TMC files TIFF files containing thermal data. software provides option store metadata images ONE csv file. csv file can used additional meta data tuav_create() function.","code":"thermal_uav_teax <- tuav_create(path = \"E:/Thermal_Project/Thermal_data_TeAx/\",                                 camera = \"ThermalCapture\",                                 meta_csv = \"E:/Thermal_Project/Thermal_data_TeAx/Thermal_Project_meta.csv\",                                 flight_height = 75)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"check-and-clean-the-data","dir":"Articles","previous_headings":"3. Advanced workflow with TeAx ThermalCapture 2.0","what":"3.2. Check and clean the data","title":"Image-based Workflow","text":"data volume quite high (16612 images) can see following code: can also check visually images located space using following code: images need converted, might require lot computing power. Generally, also don’t need around 8 images per second, resulting mean frontal overlap 98.7 %. R package offers two functions deal data reduction. Either keep predefined amount images per second using tuav_persec(), set minimal threshold overlap sharpness tuav_reduc(). can call “?tuav_reduc” get information function’s parameters. use method overlap, means algorithm select images result frontal overlap given value (case 0.9 frontal overlap 90%). algorithm select images enough quality (.e. sharpness_threshold). latter requirement met, take best option threshold still ensure minimal required overlap. case, provide list images kept, meet required quality checks. Lastly, option delete images local storage (careful option), can just move images different folder (= DEFAULT). can see mean frontal overlap reduced visualize interactive map:","code":"thermal_uav_teax@Info@dataset_length thermal_uav_teax_loc <- tuav_loc(thermal_uav_teax,                                  extent = TRUE,   # Calculate the image extents                                  overlap = TRUE)  # Calculate the mean frontal overlap  thermal_uav_teax_loc@Position@overlap tuav_view(thermal_uav_teax_loc, extent = TRUE) thermal_uav_teax_clean <- tuav_reduc(thermal_uav_teax_loc,                                      method = \"Overlap\",                                      min_overlap = 0.9,                                      sharpness_threshold = 0.05,                                      remove = FALSE) thermal_uav_teax_clean@Position@overlap tuav_view(thermal_uav_teax_clean, extent = TRUE)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"co-regsitration-with-micasense-altum-pt","dir":"Articles","previous_headings":"3. Advanced workflow with TeAx ThermalCapture 2.0","what":"3.3. Co-regsitration with Micasense Altum-PT","title":"Image-based Workflow","text":"ThermalCapture 2.0 standalone camera GPS power supply (get information UAV). sensor-platform configuration used together Micasense Altum-PT, receives RTK GPS signals UAV (DJI Matrice 300 RTK). ThermalCapture’s GPS information used derive accurate timestamps. Subsequently, accurate timestamps can used retrieve corresponding RTK GPS signal Micasense Altum-PT interpolation. co-registration two options: - Directy: use GPS orientation data co-registered camera directly - Indirectly: First, align cameras co-registered camera Agisoft Metashape, export optimized camera locations csv file optimized GPS orientation data. cases first need call coreg_prep() prepare data right format: returned data.frame 9 variables. can now use tuav_coreg() function. Optionally can call tuav_view() function latest ThermalUAV object check camera locations still places correctly (serves quick visual check).","code":"opt_cameras <- coreg_prep(img_path = \"E:/Thermal_Project/data_Micasense/\",                           SfM_option = \"Agisoft Metashape\",                           opt_camera_path = \"E:/Thermal_Project/Reference_Cameras_Thermal_Project.txt\",                           camera_name = \"Altum-PT_MSP\",                           label = \"_2\",                           timezone = \"UTC\") thermal_uav_teax_coreg <- tuav_coreg(thermal_uav_teax_clean,                                      opt_cameras = opt_cameras,                                      rig_offset = c(0, 0, 0, 0, 0, 0),                                      timediff = 0)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"conversion-to-lst-1","dir":"Articles","previous_headings":"3. Advanced workflow with TeAx ThermalCapture 2.0","what":"3.4. Conversion to LST","title":"Image-based Workflow","text":"satisfied performed corrections, can now move conversion brightness temperature LST. Note, cleaning functions can also performed step, require much longer computation time. explained 2.2. Conversion LST, use function tuav_correct() perform conversion. rather long flight, weather variables collected simultaneous 5-second interval rate using Kestrel 5500. data first needs loaded put right format. can chekc structure using str() function. Datetime, can easily converted POSIXct using .POSIXct(). obtaining data.frame right format, can used tuav_correct() function","code":"Kestrel <- read.csv(\"E:/Thermal_Project/Weather_data/Kestrel_tair_relhum.csv\") str(Kestrel)      # datetime is as character -> convert to POSIXct Kestrel$datetime <- as.POSIXct(Kestrel$datetime, tz = \"UTC\") thermal_uav_teax_correct <- tuav_correct(thermal_uav_teax_coreg,                                               flight_height = NA,   # in meters                                     T_air = Kestrel,      # data.frame in °C                                     rel_hum = Kestrel,    # data.frame in %                                     T_bg = 268.26,        # in Kelvin                                     emiss = 0.985)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"smooth","dir":"Articles","previous_headings":"3. Advanced workflow with TeAx ThermalCapture 2.0","what":"3.5. Smooth","title":"Image-based Workflow","text":"Optionally additional smoothing procedure can applied avoid influence large fluctuations T_air dataset. smoothing correction based following formula paper: \\[ \\begin{align*} T_{S_{smooth}} = T_{s} - T_{air} + T_{air_{mean}} \\end{align*} \\]","code":"thermal_uav_teax_smooth <- tuav_smooth(thermal_uav_teax_correct,                                               method = \"T_air\")"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"export-and-report-1","dir":"Articles","previous_headings":"3. Advanced workflow with TeAx ThermalCapture 2.0","what":"3.6. Export and report","title":"Image-based Workflow","text":"Now back point need export images process external photogrammetry software like Agisoft Metashape. Check section 2.3. Export report details. Optionally, desired, can also create HTM-report using tuav_report():","code":"tuav_export(thermal_uav_teax_smooth,             export_path = NA) tuav_report(thermal_uav_teax_smooth,             project_name = \"Thermal_Project_TeAx\",             flight_name = \"Flight 1\",             pilot_name = \"Pilot X\",             location = \"Flightblock Y\")"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"optional-spatial-emissivity-correction-1","dir":"Articles","previous_headings":"3. Advanced workflow with TeAx ThermalCapture 2.0","what":"3.7. Optional Spatial Emissivity Correction","title":"Image-based Workflow","text":"section 2.4. Optional Spatial Emissivity Correction already discussed option account spatially explicit post-processing emissivity correction. previous example used NDVI threshold method. case show landcover option. option requires: Landcover map (LC) Two column matrix containing landcover labels corresponding emissivity values example , LC map provided 5 classes shown table : emissivity values taken Salisbury D’Aria (1994) Rubio, E., et al. (1997). First load LC map create two-column matrix containing labels corresponding emissivity value.  correcting spatially explicit emissivity, LST map final can plotted used analysis.","code":"# Load the LC map as SpatRaster LC <- rast(\"E:/Thermal_Project/LC_TeAx.tif\") # Create two-column matrix  matrix <- matrix(c(1,2,3,4,5,0.984,0.962,0.983, 0.914,0.991), ncol = 2)  # Load the LST data as SpatRaster LST_teax <- rast(\"E:/Thermal_Project/LST_TeAx.tif\")  # Plot the data par(mfrow = c(2, 1)) plot(LC, main = \"Landcover\", type = \"classes\", levels = c(\"Shrubs\", \"Mosses\", \"Trees\", \"Sandy soil\", \"Water\"), legend = \"topleft\") plot(LST_teax, main = \"LST in °C\", col = map.pal(\"magma\"), range = c(15,30)) LST_teax_emis <- tuav_emis(thermal_orig = LST_teax,                       thermal_uav = thermal_uav_teax_smooth, # The last ThermalUAV object,                        temp = \"C\", # LST is in this case in °C                       corrmap = LC,                       method = \"LC\", # Here we use the LC method                       write_Ts = TRUE, # If you want to write the output                       filename_Ts = \"E:/Thermal_Project/LST_TeAx_emis.tif\",                       write_emiss = TRUE, # Optionally you can save the emissivity raster file                       filename_emiss = \"E:/Thermal_Project/Emis_ortho_TeAx.tif\",                       LC_emiss_matrix = matrix) plot(LST_teax_emis, main = \"LST corrected for ϵ\", col = map.pal(\"magma\"), range = c(15,30))"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Image-based_Workflow.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Image-based Workflow","text":"Salisbury, J.W. D’Aria, D.M. (1994) ‘Emissivity terrestrial materials 3-5 μm atmospheric window’, Remote Sensing Environment, 47(3), pp. 345–361. Available : https://doi.org/10.1016/0034-4257(94)90102-3. Rubio, E., Caselles, V. Badenas, C. (1997) ‘Emissivity Measurements Several Soils Vegetation Types 8-14/ m Wave Band: Analysis Two Field Methods’, Remote Sensing Environment, 59(3), pp. 490-521. Available : https://doi.org/10.1016/S0034-4257(96)00123-X","code":""},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Orthomosaic-based_Workflow.html","id":"overview","dir":"Articles","previous_headings":"","what":"1. Overview","title":"Orthomosaic-based Workflow","text":"article go orthomosaic-based workflow step step. orthomosaic-based workflow intended perform corrections orthomosaic containing uncorrected brightness temperatures presented Figure bellow. showcase steps example using Micasense Altum-PT camera. camera collects tiff images blue, green, red, red-edge, near-infrared, well thermal infrared range. thermal data stored centikelvin. # 2. Load necessary data First, multiband data stitched multispectral orthomosaic using Agisoft Metashape (phogrammetry software also possible), following workflow. resulted multispectral orthomosaic reflectance blue, green, red, red-edge near infra-red, well temperature °C. first load data select right bands processing.","code":"library(theRmalUAV) # For thermal processing library(terra)      # For working with rasters  MSP <- rast(\"E:/Thermal_Project/MSP_ortho_micasense.tif\") names(MSP) <- c(\"BLU\", \"GRE\", \"RED\", \"REG\", \"NIR\", \"TIR\") TIR <- MSP$TIR NDVI <- (MSP$NIR - MSP$RED)/(MSP$NIR + MSP$RED)  par(mfrow = c(2, 1)) plot(NDVI, main = \"NDVI\") plot(TIR, main = \"Brightness temperature in °C\", col = map.pal(\"magma\"))"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/Orthomosaic-based_Workflow.html","id":"conversion-to-lst","dir":"Articles","previous_headings":"","what":"3. Conversion to LST","title":"Orthomosaic-based Workflow","text":"NDVI map created, can account emissivity spatially explicit way using NDVI threshold method. example going set tho following parameters, emissivity values taken paper: NDVIveg = 0.8 NDVIsoil = 0.1 ϵveg = 0.984 (Emissivity shrubs) ϵsoil = 0.914 (Emissivity sandsoils) function ortho_correct() returns SpatRaster object. can plot export geotiff using terra-package:","code":"LST_correct <- ortho_correct(thermal_ortho = TIR,                              temp = \"C\",         # Thermal map is in °C                              flight_height = 75, # in meter                              T_air = 18.6,       # in °C                              rel_hum = 46.1,     # in %                              T_bg = 286.65,      # in Kelvin                              emiss = NA,                              method = \"NDVI\",                              corrmap = NDVI,                              NDVI_veg = 0.8,                              NDVI_soil = 0.1,                              emiss_veg = 0.984,                              emiss_soil = 0.914) plot(LST_correct, main = \"Land surface temperature in °C\", col = map.pal(\"magma\"))  writeRaster(LST_correct, \"E:/Thermal_Project/LST_micasense.tif\", overwrite = TRUE)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/DJI_cameras.html","id":"setup-and-initialize","dir":"Articles","previous_headings":"","what":"1. Setup and initialize","title":"DJI cameras","text":"thermal images DJI cameras stored specific way. start written JPG files instead tiff. Furthermore, DN values thermal images readily converted temperatures. conversion limited DJI software. However, DJI released Thermal SDK Dynamic Link Libraries can incorporated code process DJI thermal images. big remark: can accessed Windows Linux system… R package Thermal SDK built well. access libraries, package runs python script background. , can process DJI data, first need download install version Python pc. Python installed, virtual environment established order work python R. package dependent package Reticulate link R Python. can hust run function dji_init() initialize virtual environment.","code":"library(theRmalUAV) dji_init()"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/DJI_cameras.html","id":"create-a-thermaluav","dir":"Articles","previous_headings":"","what":"2. Create a ThermalUAV","title":"DJI cameras","text":"DJI camera compatible package (check tuav_cameras()), two options: - Follow image-based workflow - Process data DJI IR Processing tool (dirp) first case gladly refer vignette image-based workflow. article discuss second option. DJI IR processing tool built function tuav_dji(). function processes data using provided libraries DJI. input variables thus DJI Thermal Analysis Tool software. keep geotags facilitate process, first ThermalUAV object created using tuav_dji().","code":"thermal_uav_dji_M3T <- tuav_create(path = \"E:/Thermal_Project/Thermal_data_dji/DJI_20240806165425_0078_T.JPG\",                                # ThermalUAV objects can also consist of only 1 image if desired                                camera = \"DJI_M3T\",                                meta_csv = NA,                                flight_height = 75)"},{"path":"https://christophemetsu.github.io/theRmalUAV/articles/DJI_cameras.html","id":"process-with-dji-ir-processing-tool","dir":"Articles","previous_headings":"","what":"3. Process with DJI IR Processing tool","title":"DJI cameras","text":"ThermalUAV object created, can call function tuav_dji(). Please check carefully range parameter provided. processed, can plot image:","code":"dji_M3T <- tuav_dji(thermal_uav_dji_M3T,                     obj_dist = 25,      # limited to [1-25] in meter                     rel_hum = 47.2,     # should be between [20 - 100] in %                     emissivity = 0.985,                     refl_temp = 5,                     return = TRUE,                     export = FALSE,                     export_path = NA) library(terra) LST_dji_M3T <- rast(dji_M3T) plot(LST_dji_M3T, main = \"LST\", col = map.pal(\"magma\"))"}]
